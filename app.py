{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dissertation Gantt Tracker Dashboard"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "This Dash app visualizes and manages the progress of a dissertation project\n",
    "as an editable Gantt chart. It allows for task tracking, progress updates,\n",
    "and supervisor comments. Edits made in the table are persisted to CSV.\n",
    "\n",
    "Author: Pritid Nandy\n",
    "Date: June 2025"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash app running on http://127.0.0.1:7400/\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from dash import Dash, dcc, html, Input, Output, State, dash_table\n",
    "from flask import send_from_directory\n",
    "import datetime\n",
    "\n",
    "# Constants\n",
    "DOCS_FOLDER = \"docs\"\n",
    "if not os.path.exists(DOCS_FOLDER):\n",
    "    os.makedirs(DOCS_FOLDER)\n",
    "\n",
    "# Load data\n",
    "df = pd.read_csv(\"gantt_data.csv\")\n",
    "df['Start'] = pd.to_datetime(df['Start'])\n",
    "df['Finish'] = pd.to_datetime(df['Finish'])\n",
    "\n",
    "def create_spirit_glass_chart_from_csv(filepath=\"eu_exports.csv\"):\n",
    "    import plotly.graph_objects as go\n",
    "\n",
    "    df = pd.read_csv(filepath)\n",
    "\n",
    "    # Clean export values: remove ¬£ and commas, convert to float\n",
    "    df[\"EU Export (¬£)\"] = df[\"EU Export (¬£)\"].replace('[¬£,]', '', regex=True).astype(float)\n",
    "\n",
    "    # Keep only spirit categories (excluding sugary waters, cider, etc.)\n",
    "    spirit_df = df[df[\"Product\"].str.contains(\"Whiskies|Gin|Vodka|Liqueurs|Ethyl alcohol\", case=False)]\n",
    "\n",
    "    # Sort descending by value\n",
    "    spirit_df = spirit_df.sort_values(by=\"EU Export (¬£)\", ascending=False)\n",
    "\n",
    "    colors = [\"#b5651d\", \"#f4d03f\", \"#d98880\", \"#5dade2\", \"#bb8fce\", \"#85c1e9\"]\n",
    "\n",
    "    fig = go.Figure()\n",
    "    total = spirit_df[\"EU Export (¬£)\"].sum()\n",
    "    cumulative = 0\n",
    "\n",
    "    for i, row in enumerate(spirit_df.itertuples()):\n",
    "        fig.add_trace(go.Bar(\n",
    "            y=[\"Total Export\"],\n",
    "            x=[row._4],\n",
    "            name=row.Product,\n",
    "            orientation=\"h\",\n",
    "            marker_color=colors[i % len(colors)],\n",
    "            base=cumulative,\n",
    "            hovertemplate=f\"<b>{row.Product}</b><br>Export: ¬£{{x:,.0f}}<br>Share: {row._4 / total:.1%}<extra></extra>\"\n",
    "        ))\n",
    "        cumulative += row._4\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=\"ü•É EU Spirit Exports (2021‚Äì2025): 'Spirit in a Glass' Visualisation\",\n",
    "        barmode=\"stack\",\n",
    "        xaxis=dict(title=\"Export Value (¬£)\", tickformat=\",\"),\n",
    "        yaxis=dict(showticklabels=False),\n",
    "        height=300,\n",
    "        margin=dict(l=30, r=30, t=60, b=40),\n",
    "        showlegend=True\n",
    "    )\n",
    "\n",
    "    return fig\n",
    "\n",
    "# Initialize app\n",
    "app = Dash(__name__)\n",
    "server = app.server  # Needed for file download\n",
    "\n",
    "# Gantt Chart Generator\n",
    "def create_figure(dataframe):\n",
    "    fig = px.timeline(\n",
    "        dataframe,\n",
    "        x_start=\"Start\", x_end=\"Finish\",\n",
    "        y=\"Task\", color=\"Phase\", text=\"Progress\",\n",
    "        title=\"Dissertation Gantt Chart\"\n",
    "    )\n",
    "    fig.update_yaxes(autorange=\"reversed\")\n",
    "    fig.update_layout(showlegend=False, margin=dict(l=20, r=20, t=40, b=20))\n",
    "    return fig\n",
    "# üîÅ Generate clickable file links\n",
    "def get_file_links():\n",
    "    links = []\n",
    "    for filename in sorted(os.listdir(DOCS_FOLDER)):\n",
    "        path = f\"/docs/{filename}\"\n",
    "        links.append(html.Div([\n",
    "            html.A(f\"üìÑ {filename}\", href=path, target=\"_blank\", style={'fontFamily': 'Georgia'})\n",
    "        ]))\n",
    "    return links\n",
    "\n",
    "# ‚úÖ App layout starts AFTER the function is defined\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"üßæ Dissertation Gantt Tracker\", style={'fontFamily': 'Georgia'}),\n",
    "\n",
    "    # üìä Gantt chart\n",
    "    dcc.Graph(id=\"gantt\", figure=create_figure(df)),\n",
    "\n",
    "    # üç∏ Spirit Chart (Insert Here)\n",
    "    html.H2(\"ü•É EU Spirit Exports: 'Spirit in a Glass' Chart\", style={'fontFamily': 'Georgia'}),\n",
    "    html.Div([\n",
    "        html.Div(\n",
    "            dcc.Graph(figure=create_spirit_glass_chart_from_csv()),\n",
    "            style={'width': '65%', 'display': 'inline-block', 'verticalAlign': 'top'}\n",
    "        ),\n",
    "        html.Div(\n",
    "            dash_table.DataTable(\n",
    "                id='eu-exports-table',\n",
    "                columns=[\n",
    "                    {\"name\": col, \"id\": col} for col in pd.read_csv(\"eu_exports.csv\").columns\n",
    "                ],\n",
    "                data=pd.read_csv(\"eu_exports.csv\").to_dict('records'),\n",
    "                style_table={'overflowX': 'auto'},\n",
    "                style_cell={'fontFamily': 'Georgia', 'textAlign': 'left'},\n",
    "                style_header={'fontWeight': 'bold'},\n",
    "                page_size=10\n",
    "            ),\n",
    "            style={'width': '33%', 'display': 'inline-block', 'paddingLeft': '15px'}\n",
    "        )\n",
    "    ]),\n",
    "\n",
    "\n",
    "    # üìù Data Table for editing\n",
    "    html.H2(\"üìã Edit Progress and Notes\", style={'fontFamily': 'Georgia'}),\n",
    "    dash_table.DataTable(\n",
    "        id='datatable',\n",
    "        columns=[{\"name\": i, \"id\": i, \"editable\": True} for i in df.columns],\n",
    "        data=df.to_dict('records'),\n",
    "        editable=True,\n",
    "        style_table={'overflowX': 'auto'},\n",
    "        style_cell={'textAlign': 'left', 'fontFamily': 'Georgia'},\n",
    "    ),\n",
    "    html.Button(\"Update Chart\", id='update', n_clicks=0),\n",
    "    html.Div(id='update-msg', style={'marginTop': '10px', 'fontStyle': 'italic'}),\n",
    "\n",
    "    # üìÅ File upload/view\n",
    "    html.H2(\"üìÅ Upload or View Files\", style={'fontFamily': 'Georgia', 'marginTop': '40px'}),\n",
    "    \n",
    "    dcc.Upload(\n",
    "        id='upload-data',\n",
    "        children=html.Div([\n",
    "            'üì§ Drag and Drop or ',\n",
    "            html.A('Select Files')\n",
    "        ]),\n",
    "        style={\n",
    "            'width': '60%',\n",
    "            'height': '80px',\n",
    "            'lineHeight': '60px',\n",
    "            'borderWidth': '1px',\n",
    "            'borderStyle': 'dashed',\n",
    "            'borderRadius': '5px',\n",
    "            'textAlign': 'center',\n",
    "            'margin': '10px'\n",
    "        },\n",
    "        multiple=True\n",
    "    ),\n",
    "    html.Div(children=get_file_links(), id='file-list', style={'marginTop': '10px'})\n",
    "])\n",
    "\n",
    "\n",
    "# üìä Update Chart + Save Edits\n",
    "@app.callback(\n",
    "    Output(\"gantt\", \"figure\"),\n",
    "    Output(\"update-msg\", \"children\"),\n",
    "    Input(\"update\", \"n_clicks\"),\n",
    "    State(\"datatable\", \"data\")\n",
    ")\n",
    "def update_chart(n_clicks, data):\n",
    "    if not data:\n",
    "        return create_figure(df), \"‚ö†Ô∏è No data to update.\"\n",
    "    updated_df = pd.DataFrame(data)\n",
    "    updated_df['Start'] = pd.to_datetime(updated_df['Start'])\n",
    "    updated_df['Finish'] = pd.to_datetime(updated_df['Finish'])\n",
    "    updated_df.to_csv(\"gantt_data.csv\", index=False)\n",
    "    return create_figure(updated_df), \"‚úÖ Chart updated and saved.\"\n",
    "\n",
    "# üìÅ Save uploaded files\n",
    "import base64\n",
    "\n",
    "@app.callback(\n",
    "    Output('file-list', 'children'),\n",
    "    Input('upload-data', 'contents'),\n",
    "    State('upload-data', 'filename'),\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def save_file(contents, filenames):\n",
    "    if contents and filenames:\n",
    "        for content, name in zip(contents, filenames):\n",
    "            try:\n",
    "                header, encoded = content.split(',', 1)\n",
    "                data = base64.b64decode(encoded)\n",
    "                with open(os.path.join(DOCS_FOLDER, name), \"wb\") as f:\n",
    "                    f.write(data)\n",
    "            except Exception as e:\n",
    "                print(f\"Error saving file {name}: {e}\")\n",
    "    return get_file_links()\n",
    "\n",
    "# üìÑ Generate clickable links for all docs\n",
    "DOCS_FOLDER = \"docs\"\n",
    "os.makedirs(DOCS_FOLDER, exist_ok=True)\n",
    "\n",
    "def get_file_links():\n",
    "    try:\n",
    "        files = sorted(os.listdir(DOCS_FOLDER))\n",
    "        links = []\n",
    "        for filename in files:\n",
    "            if filename.startswith(\".\"):  # skip hidden files\n",
    "                continue\n",
    "            path = f\"/docs/{filename}\"\n",
    "            links.append(html.Div([\n",
    "                html.A(f\"üìÑ {filename}\", href=path, target=\"_blank\", style={'fontFamily': 'Georgia'})\n",
    "            ]))\n",
    "        return links or [html.Div(\"üìÇ No documents uploaded yet.\")]\n",
    "    except Exception as e:\n",
    "        return [html.Div(f\"‚ö†Ô∏è Error loading files: {e}\")]\n",
    "\n",
    "# üß≠ Route to serve uploaded files\n",
    "@server.route(\"/docs/<path:filename>\")\n",
    "def serve_file(filename):\n",
    "    return send_from_directory(DOCS_FOLDER, filename, as_attachment=False)\n",
    "\n",
    "# üöÄ Launch\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(host=\"0.0.0.0\", port=10000, debug=False)\n",
    "#   app.run_server(jupyter_mode='external', debug=True, port=7400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
